version: '3'

tasks:
  run:
    desc: Run users-api
    cmds:
      - go run cmd/users-api/main.go

  build:
    desc: Build users-api
    cmds:
      - go build -o users-api.exe cmd/users-api/main.go

  lint:
    desc: Run linters
    cmds:
      - govulncheck ./...
      - buf lint
      - go vet ./...
      - golangci-lint run

  test:
    desc: Run tests
    cmds:
      - go test ./...

  format:
    desc: Run source files with golines and goimports
    cmds:
      - buf format -w
      - for f in $(find . -name *.go -print); do golines --base-formatter="goimports -local $(go list -m)" -w $f; done

  cover:
    desc: Go code coverage
    cmds:
      - go test ./... -coverprofile=coverage.out
      - go tool cover -func=coverage.out | grep ^total
      # - go tool cover -html=coverage.out
      - rm -f coverage.out

  generate:
    desc: Generate code
    cmds:
      - go generate cmd/launch-api/internal/adapters/ent
      - oapi-codegen --config=types.cfg.yaml api/openapi/v1/users.yaml
      - oapi-codegen --config=server.cfg.yaml api/openapi/v1/users.yaml
      - buf generate

  tools:
    desc: Install tools
    cmds:
      - go install golang.org/x/vuln/cmd/govulncheck@latest
      - go install github.com/segmentio/golines@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/bufbuild/buf/cmd/buf@latest # not recommended way to install
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - go install entgo.io/ent/cmd/ent@latest
      - go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest
